#!/usr/bin/python

import subprocess
from multiprocessing import Process, Value
import os, sys
import Queue


def changeRootDir():
    while True:
        loc = os.getcwd()
        if loc == '/':
            print 'error: repo is not installed.  Use "repo init" to install it here.'
            sys.exit(-1)
        else:
            if os.path.isdir('.repo'):
                return loc
            else:
                os.chdir('..')

def getProjectList():
    queue = Queue.Queue()
    List = open('.repo/project.list','r')
    while True:
        context = List.readline()
        if not context:
            break
        queue.put(context.strip())
    return queue

def getProjectListRepo():
    ret = runCmd('repo list', returnType=True)
    repoList = Queue.Queue()
    if not ret:
        sys.exit(-1)
    for content in ret[0].strip().split('\n'):
        repoList.put(content.split(' : '))
    repoList.put('STOP')
    return repoList


def runCmd(cmd, shell=True, returnType=False ,loc=None):
    if returnType:
        stdin = subprocess.PIPE
        stdout = subprocess.PIPE
        stderr = subprocess.PIPE
    else:
        stdin=None
        stdout=None
        stderr=None
    p = subprocess.Popen(cmd,
                         cwd=loc,
                         shell=shell,
                         stdin=stdin,
                         stdout=stdout,
                         stderr=stderr,
                         executable='/bin/bash')
    return p.communicate()


def runCmdThread(jobs, cmd, project):
#    print jobs.value
#    jobs.value += 1
    setenv('REPO_PROJECT',project[1])
    setenv('REPO_PATH',project[0])
    runCmd(cmd, loc=project[0])
    jobs.value -= 1


def setenv(name, val):
    os.environ[name] = val


def runCommand(args):
    repoList = getProjectListRepo()
    root = changeRootDir()
    tot_jobs=0
    cur_jobs = Value('i',0)
    job_list =[]
    try:
        if isinstance(int(args[0]), int) and int(args[0]) >= 1:
            tot_jobs = int(args[0])
        else:
            print "fatal : first argument is greater than 1"
            sys.exit(-1)
    except ValueError:
        print "fatal : first argument must be INTEGER"
        sys.exit(-1)
    cmd = ''
    for i in range(1,len(args)):
        cmd += args[i] + ' '
    while True:
        if  cur_jobs.value <= tot_jobs and cur_jobs.value >= 0:
            project = repoList.get()
            if repoList.empty():
                break
            else:
                cur_jobs.value += 1
                process = Process(target=runCmdThread, args=(cur_jobs, cmd, project,))
                process.start()
        else:
            continue

def main(args):
    try:
        runCommand(args)
    except (KeyboardInterrupt):
        print '\nReceived keyboard interrupt, quitting threads. \n'
        sys.exit(0)
        

if __name__ == "__main__":
    main(sys.argv[1:])
