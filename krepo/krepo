#!/usr/bin/python

import subprocess
from multiprocessing import Process, Value
import os, sys
import Queue


def getProjectList():
    queue = Queue.Queue()
    while True:
        loc = os.getcwd()
        if loc == '/':
            print 'error: repo is not installed.  Use "repo init" to install it here.'
            sys.exit(-1)
        else:
            if os.path.isdir('.repo'):
                os.chdir(loc)
                List = open('.repo/project.list','r')
                while True:
                    context = List.readline()
                    if not context:
                        break
                    queue.put(context.strip())
#                queue.put('STOP')
                break
            else:
                os.chdir('..')
    return queue

def getProjectListRepo():
    ret = runCmdReturn('repo list')
    repoList = Queue.Queue()
    if not ret:
        sys.exit(-1)
    for content in ret[0].strip().split('\n'):
        repoList.put(content.split(' : '))
    repoList.put('STOP')
    return repoList


def runCmdReturn(cmd):
    pcmd = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, executable='/bin/bash')
    return pcmd.communicate()


def runCmd(cmd):
    p = subprocess.Popen(cmd, shell=True, executable='/bin/bash')
    p.communicate()


def runCmdThread(jobs, cmds, project):
    jobs.value += 1
    setenv('REPO_PROJECT',project[1])
    setenv('REPO_PATH',project[0])
    runCmd(cmds)
    jobs.value -= 1


def setenv(name, val):
    os.environ[name] = val


def runCommand(args):
    repoList = getProjectListRepo()
    root = os.getcwd()
    jobs=0
    tot_jobs = Value('i',0)
    try:
        if isinstance(int(args[0]), int):
            jobs = args[0]
    except ValueError:
        print "fatal : first argument must be INTEGER"
        sys.exit(-1)
    cmd = ''
    for i in range(1,len(args)):
        cmd += args[i] + ' '
    while True:
        cur_job = tot_jobs.value
        if int(cur_job) <= int(jobs):
            project = repoList.get()
            if repoList.empty():
                break
            else:
                os.chdir(root)
                os.chdir(project[0])
                process = Process(target=runCmdThread, args=(tot_jobs, cmd, project,))
                process.start()


def main(args):
    try:
        runCommand(args)
    except (KeyboardInterrupt):
        print '\nReceived keyboard interrupt, quitting threads. \n'
        sys.exit(0)
        

if __name__ == "__main__":
    main(sys.argv[1:])
