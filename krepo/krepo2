#! /usr/bin/env python

import subprocess
import os
import sys
import time
import xml.etree.ElementTree as ET


def changeRootDir():
    while True:
        loc = os.getcwd()
        if loc == '/':
            print 'error: repo is not installed.  Use "repo init" to install it here.'
            sys.exit(-1)
        else:
            if os.path.isdir('.repo'):
                return loc
            else:
                os.chdir('..')


def runCmd(cmd, shell=True, returnType=False ,loc=None):
    if returnType:
        stdin = subprocess.PIPE
        stdout = subprocess.PIPE
        stderr = subprocess.PIPE
    else:
        stdin=None
        stdout=None
        stderr=None
    p = subprocess.Popen(cmd,
                         cwd=loc,
                         shell=shell,
                         stdin=stdin,
                         stdout=stdout,
                         stderr=stderr,
                         executable='/bin/bash')
    return p.communicate()


def getBranchInfo():
    changeRootDir()
    if os.path.isdir('.repo/manifests.git'):
        os.chdir('.repo/manifests.git')
    else:
        print >> sys.stderr, "fatal : manifests.git folder is not exist"
        sys.exit(1)

    remoteBranch = runCmd('git config branch.default.merge', returnType=True)[0].strip().split('\n')
    remoteInfoData = runCmd('git config remote.origin.url', returnType=True)[0].strip().split('\n')

    remoteInfo = remoteInfoData[0].split("/")[2].split(':')
    if remoteInfo[0].split('.')[0][:3] == "lap":
        remoteInfo[0] = "lap.lge.com"
        
    return {"url" : remoteInfo[0], "port" : remoteInfo[1]}, remoteBranch[0] 


def getManifestInfo(manifestFile=None):
    changeRootDir()
    manifestProject = {}

    if manifestFile is None:
        manifestFile = '.repo/manifest.xml'

    if not os.path.exists(manifestFile):
        print >> sys.stderr, "fatal : No such default.xml file"
        sys.exit(1) 

    srcTree = ET.ElementTree()
    srcRoot = srcTree.parse(manifestFile)

    for node in srcRoot:
        if node.tag == 'project':
            manifestProject[node.attrib['name']] = node.attrib
            if not manifestProject[node.attrib['name']].has_key('path'):
                manifestProject[node.attrib['name']].update({'path' : node.attrib['name']})
        elif node.tag == 'include':
            includedManifestFile = ".repo/manifests/"+node.attrib['name'].strip()
            if os.path.exists(includedManifestFile):
                manifestProject.update(getManifestInfo(includedManifestFile))
        else:
            continue

    return manifestProject


def getRevisionFromGerrit(remoteInfo, branch):
    serverProjectsInfo = {}
    cmd = 'ssh -p %s %s gerrit ls-projects -b %s' %(remoteInfo['port'],remoteInfo['url'],branch)
    result=runCmd(cmd,returnType=True)

    for data in result[0].strip().split('\n'):
        serverProjectsInfo[data.split(' ')[1]]= {'revision' : data.split(' ')[0].strip() }

    return serverProjectsInfo


def getRevisionFromLocal(manifestProjectInfo):
    changeRootDir()

    localInfo={}
    for project in manifestProjectInfo.keys():
        projectPath = manifestProjectInfo[project]['path']
        if not os.path.isdir(projectPath + '/.git'):
            localInfo[project] = {'revision':None}
        else:
            data=runCmd("git --git-dir=" + projectPath + "/.git log -1 --pretty=format:%H ",returnType=True)[0].strip()
            localInfo[project]= {'revision' : data}

    return localInfo


def updateManifest(branch):
    changeRootDir()
    manifestFile = ".repo/manifest.xml"
    if os.path.exists(os.path.join(os.path.dirname(manifestFile), os.readlink(manifestFile))):
        os.chdir(".repo/manifests")
        returnValue=runCmd("git status", returnType=True)[0].strip().split('\n')
        if len(returnValue) > 2 :
            print >> sys.stderr, "# default.xml is changed, so not update manifest git"
        else:
            runCmd('git fetch origin %s:refs/remotes/origin/%s && git reset --hard origin/%s' %(branch,branch,branch))
        changeRootDir()
    else:
        print >> sys.stderr, "fatal : please run repo init"
        sys.exit(1)

def main(argv):
    changeRootDir()
    remoteInfo, remoteBranch = getBranchInfo()
    updateManifest(remoteBranch)
    
    print "========== Infomation =========="
    print " - branch : %s" %remoteBranch
    print " - port : %s" %remoteInfo['port']
    print " - url : %s" %remoteInfo['url']
    print "================================"

    syncProjectInfo = []
    resetProjectInfo = {}

    manifestProjectInfo = getManifestInfo()
    serverProjectsInfo = getRevisionFromGerrit(remoteInfo, remoteBranch)
    
    for project in manifestProjectInfo.keys():
        if manifestProjectInfo[project].has_key("groups") and manifestProjectInfo[project]['groups'].find("notdefault") != -1:
            del(manifestProjectInfo[project])
        else:
            if not manifestProjectInfo[project].has_key('revision'):
                manifestProjectInfo[project]['revision'] = serverProjectsInfo[project]['revision']
    
    localProjectInfo = getRevisionFromLocal(manifestProjectInfo)
    
    for project in manifestProjectInfo.keys():
        if manifestProjectInfo[project]['revision'] != localProjectInfo[project]['revision']:
            err=runCmd("git --git-dir=" + manifestProjectInfo[project]['path'] + "/.git log -1 --oneline " + manifestProjectInfo[project]['revision'] ,returnType=True)[1].strip()
            if err != '':
                syncProjectInfo.append(project)
            else:
                resetProjectInfo[project] = manifestProjectInfo[project]

    if len(syncProjectInfo) == 0:
        print >> sys.stderr, ">> info : sync is not necessary"
    else:
        if len(syncProjectInfo) == len(manifestProjectInfo.keys()):
            print >> sys.stderr, ">> info : sync is necessary to ALL git project"
            syncProjectInfo = []
        else:
            print >> sys.stderr, ">> info : sync is necessary to SOME git project"
            print >>sys.stderr, "========= sync project list =========="
            for syncProject in syncProjectInfo:
                print >>sys.stderr, "* %s" %(syncProject)
            print >>sys.stderr, "================================"
        runCmd('repo --time sync -c -d --no-tags -j4 -q %s' %(" ".join(syncProjectInfo)))

    if len(resetProjectInfo) == 0:
        print >> sys.stderr, ">> info : reset is not necessary"
    else:
        if len(resetProjectInfo) == len(manifestProjectInfo.keys()):
            print >> sys.stderr, ">> info : reset is necessary to ALL git project"
            resetProjectInfo = manifestProjectInfo
        else:
            print >> sys.stderr, ">> info : reset is necessary to SOME git project"
            print >>sys.stderr, "========= reset project list =========="
            for resetProject in resetProjectInfo.keys():
                print >>sys.stderr, "* %s" %(resetProject)
            print >>sys.stderr, "================================"
        start_time = time.time()
        for resetProject in resetProjectInfo.keys():
            runCmd("repo forall %s -c git reset --hard %s" %(resetProject, resetProjectInfo[resetProject]['revision']))
        print >> sys.stderr, " reset running time : %d s" %(time.time() -  start_time)
        
    runCmd("echo md5sum : $(repo forall -c 'git log -1 --pretty=format:%h' | md5sum)")

    
  
if __name__ == "__main__":
    start_time = time.time()
    main(sys.argv)
    print >> sys.stderr, ">> running time : %d s" %(time.time() - start_time)
    